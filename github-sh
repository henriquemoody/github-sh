#!/usr/bin/env bash
# Interactive Github Shell.
# Copyright (C) 2012 Henrique Moody <henriquemoody@gmail.com>.
#
# Authors
# =======
#   Henrique Moody <henriquemoody@gmail.com>
#
# Changelog
# =========
#   0.1.3   Update help message.
#   0.1.3   Update prompt with defined user data.
#   0.1.2   Created OSX compatibility
#   0.1.1   Update script structure
#   0.1.0   Base script
#

# Readonly vars
declare -r GITHUBSH_NAME=$(basename "${0}")
declare -r GITHUBSH_SOURCE="${0}"
declare -r GITHUBSH_DIRECTORY="${HOME}/.github-sh"
declare -r GITHUBSH_HISTORY="${GITHUBSH_DIRECTORY}/history"
declare -r GITHUBSH_BASE_DIRECTORY=$(dirname "${0}")
declare -r GITHUBSH_DESCRIPTION=$(sed -n 2p "${0}" |  sed -E 's/^# ?//g')
declare -r GITHUBSH_VERSION=$(sed -n 11p "${0}" | awk '{print $2}')
declare -r GITHUBSH_PROMPT="github"
declare -r GITHUBSH_PROMPT_CHAR="> "
declare -r GITHUBSH_HELP="Usage: ${GITHUBSH_NAME} [OPTIONS]
${GITHUBSH_DESCRIPTION}

    -h, --help      Displays this help.
    -s, --set       Defines default values for variables (\"user\", \"password\", \"project\").
    -v, --version   Displays the version of the program.
    -u, --update    Self update ${GITHUBSH_NAME}.

Report bugs on https://github.com/henriquemoody/github-sh/issues."

# Global vars
declare GITHUB_PROMPT="${GITHUBSH_PROMPT}${GITHUBSH_PROMPT_CHAR}"
declare GITHUB_USERNAME=""
declare GITHUB_PASSWORD=""
declare GITHUB_PROJECT=""

# Check github directory
if [ ! -d "${GITHUBSH_DIRECTORY}" ]; then
    mkdir -p "${GITHUBSH_DIRECTORY}"
fi

# _echo MESSAGE [COLOR [DECORATION]] 
_echo()
{
    local message="${1}"
    local color="${2}"
    local decoration="${3}"

    if [ "${color}" == "" ]
    then
       color=0
    fi

    if [ "${decoration}" == "" ]
    then
        decoration="normal"
    fi

    echo -e "\033[${color}m${message}\033[0m"

}

# _set VARIABLE [ VALUE ]
_set()
{
    local label="${1}"
    local value="${2}"

    if [ "${label}" == "password" ] && [ "${value}" == "" ]; then
        read -s -p "Type your password: " value
        echo ""
    elif [ "${value}" == "" ]; then
        read -e -p "Value for ${label}: " value
    fi

    case "${label}" in 

        username)
            GITHUB_USERNAME="${value}"
        ;;

        password)
            GITHUB_PASSWORD="${value}"
        ;;

        project)
            GITHUB_PROJECT="${value}"
        ;;

        *)
          _echo "Invalid variable \"${label}\".\n" 31
          return 2

    esac

    GITHUB_PROMPT="${GITHUBSH_PROMPT}"
    if [ ! -z "${GITHUB_PROJECT}" ]; then
        GITHUB_PROMPT="${GITHUB_PROMPT}/${GITHUB_PROJECT}"
    fi
    GITHUB_PROMPT="${GITHUB_PROMPT}${GITHUBSH_PROMPT_CHAR}"

    return 0
}

_external_help()
{
    local sub_help=_external_help_"${1}"

    if [ ! -z "${2}" ]; then
        sub_help="${sub_help}_${2}"
    fi

    if [ ! -z "${1}" ]; then
        type "${sub_help}" &>/dev/null \
          && ${sub_help} --full \
          || _echo "There is no help for \"${1}\"" 31
    else
        _echo "GitHub Shell Help" 32
        _echo "
    set     $(_external_help_set)
    issue   $(_external_help_issue)"
    fi

    _echo
    
}
_external_help_set()
{
    local title="Defines a value for an existent variable."
    if [ "${1}" == "--full" ]; then
        _echo "${title}\n" 32
        _echo "Usage:\n" 34
        _echo "  set VAR [ VALUE ]\n"
        _echo "Existent variables:\n" 34
        _echo "  user      : Your GitHub username."
        _echo "  password  : Your GitHub password."
        _echo "  project   : Current GitHub project."
    else
        _echo "${title}"
    fi
}
_external_help_issue()
{
    local title="Performs actions on issues."
    if [ "${1}" == "--full" ]; then
        _echo "${title}\n" 32
        _echo "Usage:\n" 34
        _echo "  issue ACTION [ OPTIONS ]\n"
        _echo "Existent actions:\n" 34
        _echo "  list      : List issues of a project."
        _echo "  open      : Create an issue in a project."
        _echo "  close     : Closes an issue of a project."
        _echo "  comments  : Displays a list of comments of an issue."
    else
        _echo "${title}"
    fi
}
# _external_issue ACTION NUMBER [ PROJECT [ USER ] ]
_external_issue()
{
    if [ -z "${1}" ]
    then
        _echo "You should define a issue action. (See \"help\" for more information)" 31 1>&2
        return 2
    fi

    if [ -z "${2}" ]
    then
        _echo "You should define a issue number. (See \"help\" for more information)" 31 1>&2
        return 3
    fi

    local action="${1}"
    local number="${2}"
    local project="${3}"
    local user="${4}"
    local extra_param=""
    local url

    if [ -z "${project}" ]
    then
        if [ -z "${GITHUB_PROJECT}" ]
        then
            read -e -p "Project name: " project
        else
            project="${GITHUB_PROJECT}"
        fi
    fi

    if [ -z "${user}" ]
    then
        if [ -z "${GITHUB_USERNAME}" ]
        then
            read -e -p "User or Organization: " project
        else
            user="${GITHUB_USERNAME}"
        fi
    fi

    url="https://api.github.com/repos/${user}/${project}/issues/${number}/comments"

    if [ "${GITHUB_USERNAME}" != "" ]
    then
        extra_param="${GITHUB_USERNAME}"
        if [ "${GITHUB_PASSWORD}" != "" ]
        then
            extra_param="${extra_param}:${GITHUB_PASSWORD}"
        fi
        extra_param="-u '${extra_param}'"
    fi

    curl "${extra_param}" -L "${url}" \
        | grep body \
        | cut -d '"' -f 4- \
        | awk '{ gsub(/\\n/, "\n"); print }' \
        | while read line 
    do
        echo "${line}"
    done

}

# _external_issue_list [ PROJECT ]
_external_issue_list()
{
    local project="${1}"
    local url="https://api.github.com/repos"
    if [ -z "${project}" ]; then
        if [ -z "${GITHUB_PROJECT}" ]; then
            read -e -p "Project name: " project
        else
            project="${GITHUB_PROJECT}"
        fi
    fi

    url="${url}/${project}/issues"

    if [ "${GITHUB_USERNAME}" != "" ]
    then
        extra_param="${GITHUB_USERNAME}"
        if [ "${GITHUB_PASSWORD}" != "" ]
        then
            extra_param="${extra_param}:${GITHUB_PASSWORD}"
        fi
        extra_param="-u '${extra_param}'"
    fi

    echo ${url}
    JSON_CONTENT=$(curl "${extra_param}" -L "${url}" 2>/dev/null)

    echo "${JSON_CONTENT}" \
      | awk '/title/ {print NR}' \
      | while read title_line; do
          let number_line=(title_line+9)
          title=$(echo "${JSON_CONTENT}" | _jsonline ${title_line})
          number=$(echo "${JSON_CONTENT}" | _jsonline ${number_line})
          echo "${number}. ${title}"
        done
}

# _external_set VAR [ VALUE ]
_external_set()
{
    if [ -z "${1}" ]
    then
        _echo "username: \c" 34
        _echo "${GITHUB_USERNAME}" 32 \
            || _echo "NULL" 31

        local password=$(echo ${GITHUB_PASSWORD} | tr '[:alnum:]' '*')
        _echo "password: \c" 34
        _echo "${password}" 32 \
            || _echo "NULL" 31

        _echo "project:  \c" 34
        _echo "${GITHUB_PROJECT}" 32 \
            || _echo "NULL" 31

        return 0
    fi

    _set "${1}" "${2}" \
        && _echo "Value of \"${1}\" defined with sucess.\n" 32
}

# _external_exit
_external_exit()
{
    _echo "Bye!"
    exit 0
}

# Just for developers
_external_reload()
{
    clear && ${GITHUBSH_SOURCE}
}

# _shell
_shell()
{
    if [ -f "${GITHUBSH_HISTORY}" ]; then
        history -r "${GITHUBSH_HISTORY}"
    else
        touch "${GITHUBSH_HISTORY}"
    fi

    _echo "Welcome to Github Shell - ${GITHUBSH_VERSION}" 32
    _echo "${GITHUBSH_DESCRIPTION}\n"

    history -r "${GITHUBSH_HISTORY}"

    while read -e -p "${GITHUB_PROMPT}" input; do

        if [ "${input}" == "" ]; then
            continue
        fi

        command_name=$(echo "${input}" | awk '{print $1}')
        if [ "$(echo "${input}" | wc -w | awk '{print $1}')" != 1 ]; then
            command_args=$(echo "${input}" | cut -d ' ' -f 2-)
        else
            command_args=""
        fi

		history -s "${input}"

        case "${command_name}" in

            set | issue | exit | help | reload)
                _external_${command_name} ${command_args}
            ;;

            *)
                _echo "Command \"${command_name}\" not found." 31 1>&2
                continue
            ;;

        esac

        history -w "${GITHUBSH_HISTORY}"

    done

}


while [ "${1}" != "" ]
do

    case "${1}" in

        -h | --help)

            _echo "${GITHUBSH_HELP}"
            exit 0

        ;;

        -s | --set)

            echo "${2}"  | tr ','  '\n' | while read line
            do
                key="$(echo ${line} | cut -d '=' -f 1)"
                value="$(echo ${line} | cut -d '=' -f 2-)"
                _external_set "${key}" "${value}"
            done

        ;;

        -V)

            _echo "${GITHUBSH_VERSION}"
            exit 0

        ;;

        -v | --version)

            _echo "${GITHUBSH_NAME} version ${GITHUBSH_VERSION}"
            _echo "${GITHUBSH_DESCRIPTION}"
            exit 0

        ;;

        -u | --update)


            TEMPORARY=/tmp/github-sh_$(date +%s)
            curl -L git.io/github-sh -o ${TEMPORARY}
            chmod +x ${TEMPORARY}
            HEAD_VERSION=$(${TEMPORARY} -V)
            if [ "${HEAD_VERSION}" ==  "${GITHUBSH_VERSION}" ]
            then
                _echo "Nothing to update." 32
                _echo "The last version of ${GITHUBSH_NAME} is ${HEAD_VERSION}."
                rm -f ${TEMPORARY}
                exit 0
            fi

            if [ ! -w "${0}" ]
            then
                _echo "You don't have permission to update ${GITHUBSH_NAME}." 31 1>&2
                rm -f ${TEMPORARY}
                exit 3
            fi

            mv ${TEMPORARY} "${0}"
            _echo "Successfully updated of ${GITHUBSH_VERSION} to ${HEAD_VERSION}" 32
            exit 0

        ;;

        *)

            if [ "${1}" != "" ]
            then
                _echo "${GITHUBSH_HELP_MESSAGE}" 1>&2
                exit 2
            fi

        ;;

    esac

    shift 2

done

_shell
